import random

# Define classes
class GameSpot:
    def __init__(self):
        self.occupiedBy = 'water'  # 'water' by default, can be updated to ship name

class GameBoard:
    def __init__(self):
        self.grid = [[GameSpot() for _ in range(12)] for _ in range(12)]  # 12x12 game board

    def print_grid(self):
        # Print the grid with letters on one axis and numbers on the other
        print("  " + " ".join([chr(i) for i in range(65, 65 + 12)]))  # Letters A-L
        for i in range(12):
            row = [self.get_symbol(spot) for spot in self.grid[i]]
            print(f"{i+1:2} {' '.join(row)}")

    def get_symbol(self, spot):
        if spot.occupiedBy == 'water':
            return '?'
        elif spot.occupiedBy == 'hit':
            return 'X'
        elif spot.occupiedBy == 'miss':
            return 'O'
        else:
            return '?'

class Ship:
    def __init__(self, name, length):
        self.name = name
        self.length = length
        self.coordinates = []

    def can_insert(self, board, start_row, start_col, direction):
        # Validate if the ship can be inserted without going out of bounds or overlapping
        for i in range(self.length):
            if direction == 'horizontal':
                if start_col + i >= 12 or board.grid[start_row][start_col + i].occupiedBy != 'water':
                    return False
            elif direction == 'vertical':
                if start_row + i >= 12 or board.grid[start_row + i][start_col].occupiedBy != 'water':
                    return False
        return True

    def insert(self, board, start_row, start_col, direction):
        # Place the ship on the board if the insertion is valid
        if self.can_insert(board, start_row, start_col, direction):
            for i in range(self.length):
                if direction == 'horizontal':
                    board.grid[start_row][start_col + i].occupiedBy = self.name
                    self.coordinates.append((start_row, start_col + i))
                elif direction == 'vertical':
                    board.grid[start_row + i][start_col].occupiedBy = self.name
                    self.coordinates.append((start_row + i, start_col))
            return True
        return False

    def is_hit(self, row, col):
        # Check if this ship is hit at the given coordinate
        if (row, col) in self.coordinates:
            return True
        return False

class Player:
    def __init__(self, is_computer=False):
        self.own_board = GameBoard()
        self.enemy_board = GameBoard()  # Outlook for enemy guesses
        self.ships = []
        self.is_computer = is_computer

    def place_ships(self):
        if self.is_computer:
            self.randomize_ship_placement()
        else:
            # Manual ship placement for human player (omitted here, would involve input and validation)
            pass

    def randomize_ship_placement(self):
        for ship in self.ships:
            placed = False
            while not placed:
                start_row = random.randint(0, 11)
                start_col = random.randint(0, 11)
                direction = random.choice(['horizontal', 'vertical'])
                placed = ship.insert(self.own_board, start_row, start_col, direction)

    def random_guess(self):
        # Generate a random guess for the computer player
        row = random.randint(0, 11)
        col = random.randint(0, 11)
        return row, col

    def check_loss(self):
        # Check if all ships have been sunk
        for ship in self.ships:
            if any((row, col) for row, col in ship.coordinates):
                return False
        return True

# Define objects before starting the game
def create_ships():
    return [
        Ship("Destroyer", 2),
        Ship("Submarine", 3),
        Ship("Cruiser", 3),
        Ship("Battleship", 4),
        Ship("Carrier", 5),
    ]

# Main game loop
def game_loop():
    player = Player(is_computer=False)
    computer = Player(is_computer=True)
    
    # Create and place ships
    player.ships = create_ships()
    computer.ships = create_ships()
    player.place_ships()
    computer.place_ships()

    game_over = False
    while not game_over:
        # Game loop logic for player and computer turns, attacks, and checking for win condition
        
        # Example of player guessing (you can implement input for real gameplay)
        player_guess = player.random_guess()
        
        # Example of computer guessing
        computer_guess = computer.random_guess()
        
        # Update boards, check if any player has lost, etc.
        game_over = player.check_loss() or computer.check_loss()

# Start the game
game_loop()
